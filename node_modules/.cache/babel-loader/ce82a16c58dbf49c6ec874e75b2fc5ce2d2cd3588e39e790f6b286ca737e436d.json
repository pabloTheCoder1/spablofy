{"ast":null,"code":"import { getApp, _getProvider, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, createMockUserToken, getModularInstance } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\n/**\r\n * Domain name for firebase storage.\r\n */\nconst DEFAULT_HOST = 'firebasestorage.googleapis.com';\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\nconst CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\nconst DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\nconst DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\nclass StorageError extends FirebaseError {\n  /**\r\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\r\n   *  added to the end of the message.\r\n   * @param message  - Error message.\r\n   */\n  constructor(code, message) {\n    super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\n    /**\r\n     * Stores custom error data unque to StorageError.\r\n     */\n    this.customData = {\n      serverResponse: null\n    };\n    this._baseMessage = this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n  /**\r\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\r\n   */\n  _codeEquals(code) {\n    return prependCode(code) === this.code;\n  }\n  /**\r\n   * Optional response message that was added by the server.\r\n   */\n  get serverResponse() {\n    return this.customData.serverResponse;\n  }\n  set serverResponse(serverResponse) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\nfunction prependCode(code) {\n  return 'storage/' + code;\n}\nfunction unknown() {\n  const message = 'An unknown error occurred, please check the error payload for ' + 'server response.';\n  return new StorageError(\"unknown\" /* UNKNOWN */, message);\n}\nfunction objectNotFound(path) {\n  return new StorageError(\"object-not-found\" /* OBJECT_NOT_FOUND */, \"Object '\" + path + \"' does not exist.\");\n}\nfunction quotaExceeded(bucket) {\n  return new StorageError(\"quota-exceeded\" /* QUOTA_EXCEEDED */, \"Quota for bucket '\" + bucket + \"' exceeded, please view quota on \" + 'https://firebase.google.com/pricing/.');\n}\nfunction unauthenticated() {\n  const message = 'User is not authenticated, please authenticate using Firebase ' + 'Authentication and try again.';\n  return new StorageError(\"unauthenticated\" /* UNAUTHENTICATED */, message);\n}\nfunction unauthorizedApp() {\n  return new StorageError(\"unauthorized-app\" /* UNAUTHORIZED_APP */, 'This app does not have permission to access Firebase Storage on this project.');\n}\nfunction unauthorized(path) {\n  return new StorageError(\"unauthorized\" /* UNAUTHORIZED */, \"User does not have permission to access '\" + path + \"'.\");\n}\nfunction retryLimitExceeded() {\n  return new StorageError(\"retry-limit-exceeded\" /* RETRY_LIMIT_EXCEEDED */, 'Max retry time for operation exceeded, please try again.');\n}\nfunction canceled() {\n  return new StorageError(\"canceled\" /* CANCELED */, 'User canceled the upload/download.');\n}\nfunction invalidUrl(url) {\n  return new StorageError(\"invalid-url\" /* INVALID_URL */, \"Invalid URL '\" + url + \"'.\");\n}\nfunction invalidDefaultBucket(bucket) {\n  return new StorageError(\"invalid-default-bucket\" /* INVALID_DEFAULT_BUCKET */, \"Invalid default bucket '\" + bucket + \"'.\");\n}\nfunction noDefaultBucket() {\n  return new StorageError(\"no-default-bucket\" /* NO_DEFAULT_BUCKET */, 'No default bucket ' + \"found. Did you set the '\" + CONFIG_STORAGE_BUCKET_KEY + \"' property when initializing the app?\");\n}\nfunction cannotSliceBlob() {\n  return new StorageError(\"cannot-slice-blob\" /* CANNOT_SLICE_BLOB */, 'Cannot slice blob for upload. Please retry the upload.');\n}\nfunction serverFileWrongSize() {\n  return new StorageError(\"server-file-wrong-size\" /* SERVER_FILE_WRONG_SIZE */, 'Server recorded incorrect upload file size, please retry the upload.');\n}\nfunction noDownloadURL() {\n  return new StorageError(\"no-download-url\" /* NO_DOWNLOAD_URL */, 'The given file does not have any download URLs.');\n}\n/**\r\n * @internal\r\n */\nfunction invalidArgument(message) {\n  return new StorageError(\"invalid-argument\" /* INVALID_ARGUMENT */, message);\n}\nfunction appDeleted() {\n  return new StorageError(\"app-deleted\" /* APP_DELETED */, 'The Firebase app was deleted.');\n}\n/**\r\n * @param name - The name of the operation that was invalid.\r\n *\r\n * @internal\r\n */\nfunction invalidRootOperation(name) {\n  return new StorageError(\"invalid-root-operation\" /* INVALID_ROOT_OPERATION */, \"The operation '\" + name + \"' cannot be performed on a root reference, create a non-root \" + \"reference using child, such as .child('file.png').\");\n}\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\nfunction invalidFormat(format, message) {\n  return new StorageError(\"invalid-format\" /* INVALID_FORMAT */, \"String does not match format '\" + format + \"': \" + message);\n}\n/**\r\n * @param message - A message describing the internal error.\r\n */\nfunction internalError(message) {\n  throw new StorageError(\"internal-error\" /* INTERNAL_ERROR */, 'Internal error: ' + message);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\nclass Location {\n  constructor(bucket, path) {\n    this.bucket = bucket;\n    this.path_ = path;\n  }\n  get path() {\n    return this.path_;\n  }\n  get isRoot() {\n    return this.path.length === 0;\n  }\n  fullServerUrl() {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n  bucketOnlyServerUrl() {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n  static makeFromBucketSpec(bucketString, host) {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n  static makeFromUrl(url, host) {\n    let location = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n    function gsModify(loc) {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = {\n      bucket: 1,\n      path: 3\n    };\n    function httpModify(loc) {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');\n    const firebaseStorageIndices = {\n      bucket: 1,\n      path: 3\n    };\n    const cloudStorageHost = host === DEFAULT_HOST ? '(?:storage.googleapis.com|storage.cloud.google.com)' : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');\n    const cloudStorageIndices = {\n      bucket: 1,\n      path: 2\n    };\n    const groups = [{\n      regex: gsRegex,\n      indices: gsIndices,\n      postModify: gsModify\n    }, {\n      regex: firebaseStorageRegExp,\n      indices: firebaseStorageIndices,\n      postModify: httpModify\n    }, {\n      regex: cloudStorageRegExp,\n      indices: cloudStorageIndices,\n      postModify: httpModify\n    }];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n\n/**\r\n * A request whose promise always fails.\r\n */\nclass FailRequest {\n  constructor(error) {\n    this.promise_ = Promise.reject(error);\n  }\n  /** @inheritDoc */\n  getPromise() {\n    return this.promise_;\n  }\n  /** @inheritDoc */\n  cancel() {\n    let _appDelete = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @param f May be invoked\r\n *     before the function returns.\r\n * @param callback Get all the arguments passed to the function\r\n *     passed to f, including the initial boolean.\r\n */\nfunction start(f,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ncallback, timeout) {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let retryTimeoutId = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let globalTimeoutId = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n  function canceled() {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n  function triggerCallback() {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      callback.apply(null, args);\n    }\n  }\n  function callWithDelay(millis) {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n  function clearGlobalTimeout() {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n  function handler(success) {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n  function stop(wasTimeout) {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    clearGlobalTimeout();\n    if (triggeredCallback) {\n      return;\n    }\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\nfunction stop(id) {\n  id(false);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isJustDef(p) {\n  return p !== void 0;\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isFunction(p) {\n  return typeof p === 'function';\n}\nfunction isNonArrayObject(p) {\n  return typeof p === 'object' && !Array.isArray(p);\n}\nfunction isString(p) {\n  return typeof p === 'string' || p instanceof String;\n}\nfunction isNativeBlob(p) {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\nfunction isNativeBlobDefined() {\n  return typeof Blob !== 'undefined';\n}\nfunction validateNumber(argument, minValue, maxValue, value) {\n  if (value < minValue) {\n    throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\n  }\n  if (value > maxValue) {\n    throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction makeUrl(urlPart, host, protocol) {\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\nfunction makeQueryString(params) {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\nvar ErrorCode;\n(function (ErrorCode) {\n  ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\n  ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\n  ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\n})(ErrorCode || (ErrorCode = {}));\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Handles network logic for all Storage Requests, including error reporting and\r\n * retries with backoff.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param - O the output type used by the rest of the SDK. The conversion\r\n * happens in the specified `callback_`.\r\n */\nclass NetworkRequest {\n  constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_) {\n    this.url_ = url_;\n    this.method_ = method_;\n    this.headers_ = headers_;\n    this.body_ = body_;\n    this.successCodes_ = successCodes_;\n    this.additionalRetryCodes_ = additionalRetryCodes_;\n    this.callback_ = callback_;\n    this.errorCallback_ = errorCallback_;\n    this.timeout_ = timeout_;\n    this.progressCallback_ = progressCallback_;\n    this.connectionFactory_ = connectionFactory_;\n    this.pendingConnection_ = null;\n    this.backoffId_ = null;\n    this.canceled_ = false;\n    this.appDelete_ = false;\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n  /**\r\n   * Actually starts the retry loop.\r\n   */\n  start_() {\n    const doTheRequest = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n      const progressListener = progressEvent => {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (this.progressCallback_ !== null) {\n          this.progressCallback_(loaded, total);\n        }\n      };\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n      // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection.send(this.url_, this.method_, this.body_, this.headers_).then(() => {\n        if (this.progressCallback_ !== null) {\n          connection.removeUploadProgressListener(progressListener);\n        }\n        this.pendingConnection_ = null;\n        const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n        const status = connection.getStatus();\n        if (!hitServer || this.isRetryStatusCode_(status)) {\n          const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n          backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\n          return;\n        }\n        const successCode = this.successCodes_.indexOf(status) !== -1;\n        backoffCallback(true, new RequestEndStatus(successCode, connection));\n      });\n    };\n    /**\r\n     * @param requestWentThrough - True if the request eventually went\r\n     *     through, false if it hit the retry limit or was canceled.\r\n     */\n    const backoffDone = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection;\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n  /** @inheritDoc */\n  getPromise() {\n    return this.promise_;\n  }\n  /** @inheritDoc */\n  cancel(appDelete) {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n  isRetryStatusCode_(status) {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [\n    // Request Timeout: web server didn't receive full request in time.\n    408,\n    // Too Many Requests: you're getting rate-limited, basically.\n    429];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n}\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\nclass RequestEndStatus {\n  constructor(wasSuccessCode, connection, canceled) {\n    this.wasSuccessCode = wasSuccessCode;\n    this.connection = connection;\n    this.canceled = !!canceled;\n  }\n}\nfunction addAuthHeader_(headers, authToken) {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\nfunction addVersionHeader_(headers, firebaseVersion) {\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\n}\nfunction addGmpidHeader_(headers, appId) {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\nfunction addAppCheckHeader_(headers, appCheckToken) {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion) {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction getBlobBuilder() {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\nfunction getBlob$1() {\n  const BlobBuilder = getBlobBuilder();\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\"unsupported-environment\" /* UNSUPPORTED_ENVIRONMENT */, \"This browser doesn't seem to support creating Blobs\");\n    }\n  }\n}\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Converts a Base64 encoded string to a binary string. */\nfunction decodeBase64(encoded) {\n  return atob(encoded);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\nconst StringFormat = {\n  /**\r\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n   * sequence.\r\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n   */\n  RAW: 'raw',\n  /**\r\n   * Indicates the string should be interpreted as base64-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64: 'base64',\n  /**\r\n   * Indicates the string should be interpreted as base64url-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64URL: 'base64url',\n  /**\r\n   * Indicates the string is a data URL, such as one obtained from\r\n   * canvas.toDataURL().\r\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n   * becomes the byte sequence\r\n   * 69 a6 9a\r\n   * (the content-type \"application/octet-stream\" is also applied, but can\r\n   * be overridden in the metadata object).\r\n   */\n  DATA_URL: 'data_url'\n};\nclass StringData {\n  constructor(data, contentType) {\n    this.data = data;\n    this.contentType = contentType || null;\n  }\n}\n/**\r\n * @internal\r\n */\nfunction dataFromString(format, stringData) {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\n    // do nothing\n  }\n  // assert(false);\n  throw unknown();\n}\nfunction utf8Bytes_(value) {\n  const b = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | c >> 6, 128 | c & 63);\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | (hi & 1023) << 10 | lo & 1023;\n            b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\nfunction percentEncodedBytes_(value) {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\nfunction base64Bytes_(format, value) {\n  switch (format) {\n    case StringFormat.BASE64:\n      {\n        const hasMinus = value.indexOf('-') !== -1;\n        const hasUnder = value.indexOf('_') !== -1;\n        if (hasMinus || hasUnder) {\n          const invalidChar = hasMinus ? '-' : '_';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64url encoded?\");\n        }\n        break;\n      }\n    case StringFormat.BASE64URL:\n      {\n        const hasPlus = value.indexOf('+') !== -1;\n        const hasSlash = value.indexOf('/') !== -1;\n        if (hasPlus || hasSlash) {\n          const invalidChar = hasPlus ? '+' : '/';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\n        }\n        value = value.replace(/-/g, '+').replace(/_/g, '/');\n        break;\n      }\n    // do nothing\n  }\n\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\nclass DataURLParts {\n  constructor(dataURL) {\n    this.base64 = false;\n    this.contentType = null;\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64 ? middle.substring(0, middle.length - ';base64'.length) : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\nfunction dataURLBytes_(dataUrl) {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\nfunction dataURLContentType_(dataUrl) {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\nfunction endsWith(s, end) {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n  return s.substring(s.length - end.length) === end;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\nclass FbsBlob {\n  constructor(data, elideCopy) {\n    let size = 0;\n    let blobType = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data;\n      size = data.size;\n      blobType = data.type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n  size() {\n    return this.size_;\n  }\n  type() {\n    return this.type_;\n  }\n  slice(startByte, endByte) {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\n      return new FbsBlob(slice, true);\n    }\n  }\n  static getBlob() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    if (isNativeBlobDefined()) {\n      const blobby = args.map(val => {\n        if (val instanceof FbsBlob) {\n          return val.data_;\n        } else {\n          return val;\n        }\n      });\n      return new FbsBlob(getBlob$1.apply(null, blobby));\n    } else {\n      const uint8Arrays = args.map(val => {\n        if (isString(val)) {\n          return dataFromString(StringFormat.RAW, val).data;\n        } else {\n          // Blobs don't exist, so this has to be a Uint8Array.\n          return val.data_;\n        }\n      });\n      let finalLength = 0;\n      uint8Arrays.forEach(array => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach(array => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n  uploadData() {\n    return this.data_;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\nfunction jsonObjectOrNull(s) {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\n/**\r\n * @return Null if the path is already at the root.\r\n */\nfunction parent(path) {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\nfunction child(path, childPath) {\n  const canonicalChildPath = childPath.split('/').filter(component => component.length > 0).join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\nfunction lastComponent(path) {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction noXform_(metadata, value) {\n  return value;\n}\nclass Mapping {\n  constructor(server, local, writable, xform) {\n    this.server = server;\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\nlet mappings_ = null;\nfunction xformPath(fullPath) {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\nfunction getMappings() {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings = [];\n  mappings.push(new Mapping('bucket'));\n  mappings.push(new Mapping('generation'));\n  mappings.push(new Mapping('metageneration'));\n  mappings.push(new Mapping('name', 'fullPath', true));\n  function mappingsXformPath(_metadata, fullPath) {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n  /**\r\n   * Coerces the second param to a number, if it is defined.\r\n   */\n  function xformSize(_metadata, size) {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping('timeCreated'));\n  mappings.push(new Mapping('updated'));\n  mappings.push(new Mapping('md5Hash', null, true));\n  mappings.push(new Mapping('cacheControl', null, true));\n  mappings.push(new Mapping('contentDisposition', null, true));\n  mappings.push(new Mapping('contentEncoding', null, true));\n  mappings.push(new Mapping('contentLanguage', null, true));\n  mappings.push(new Mapping('contentType', null, true));\n  mappings.push(new Mapping('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\nfunction addRef(metadata, service) {\n  function generateRef() {\n    const bucket = metadata['bucket'];\n    const path = metadata['fullPath'];\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', {\n    get: generateRef\n  });\n}\nfunction fromResource(service, resource, mappings) {\n  const metadata = {};\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\n  }\n  addRef(metadata, service);\n  return metadata;\n}\nfunction fromResourceString(service, resourceString, mappings) {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj;\n  return fromResource(service, resource, mappings);\n}\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens = obj['downloadTokens'];\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map(token => {\n    const bucket = metadata['bucket'];\n    const path = metadata['fullPath'];\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\nfunction toResourceString(metadata, mappings) {\n  const resource = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\nfunction fromBackendResponse(service, bucket, resource) {\n  const listResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\n      listResult.prefixes.push(reference);\n    }\n  }\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(new Location(bucket, item['name']));\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\nfunction fromResponseString(service, bucket, resourceString) {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj;\n  return fromBackendResponse(service, bucket, resource);\n}\n\n/**\r\n * Contains a fully specified request.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param O - the output response type used by the rest of the SDK.\r\n */\nclass RequestInfo {\n  constructor(url, method,\n  /**\r\n   * Returns the value with which to resolve the request's promise. Only called\r\n   * if the request is successful. Throw from this function to reject the\r\n   * returned Request's promise with the thrown error.\r\n   * Note: The XhrIo passed to this function may be reused after this callback\r\n   * returns. Do not keep a reference to it in any way.\r\n   */\n  handler, timeout) {\n    this.url = url;\n    this.method = method;\n    this.handler = handler;\n    this.timeout = timeout;\n    this.urlParams = {};\n    this.headers = {};\n    this.body = null;\n    this.errorHandler = null;\n    /**\r\n     * Called with the current number of bytes uploaded and total size (-1 if not\r\n     * computable) of the request body (i.e. used to report upload progress).\r\n     */\n    this.progressCallback = null;\n    this.successCodes = [200];\n    this.additionalRetryCodes = [];\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Throws the UNKNOWN StorageError if cndn is false.\r\n */\nfunction handlerCheck(cndn) {\n  if (!cndn) {\n    throw unknown();\n  }\n}\nfunction metadataHandler(service, mappings) {\n  function handler(xhr, text) {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata;\n  }\n  return handler;\n}\nfunction listHandler(service, bucket) {\n  function handler(xhr, text) {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult;\n  }\n  return handler;\n}\nfunction downloadUrlHandler(service, mappings) {\n  function handler(xhr, text) {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\n  }\n  return handler;\n}\nfunction sharedErrorHandler(location) {\n  function errorHandler(xhr, err) {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      if (\n      // This exact message string is the only consistent part of the\n      // server's error response that identifies it as an App Check error.\n      xhr.getErrorText().includes('Firebase App Check token is invalid')) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\nfunction objectErrorHandler(location) {\n  const shared = sharedErrorHandler(location);\n  function errorHandler(xhr, err) {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\nfunction getMetadata$2(service, location, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\n  const urlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, (_, data) => data, timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n  }\n\n  return requestInfo;\n}\nfunction getDownloadUrl(service, location, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction updateMetadata$2(service, location, metadata, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = {\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction deleteObject$2(service, location) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n  function handler(_xhr, _text) {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\nfunction determineContentType_(metadata, blob) {\n  return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';\n}\nfunction metadataForUpload_(location, blob, metadata) {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\nfunction multipartUpload(service, location, mappings, blob, metadata) {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n  function genBoundary() {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart = '--' + boundary + '\\r\\n' + 'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' + metadataString + '\\r\\n--' + boundary + '\\r\\n' + 'Content-Type: ' + metadata_['contentType'] + '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams = {\n    name: metadata_['fullPath']\n  };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\nclass ResumableUploadStatus {\n  constructor(current, total, finalized, metadata) {\n    this.current = current;\n    this.total = total;\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\nfunction checkResumeHeader_(xhr, allowed) {\n  let status = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status;\n}\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams = {\n    name: metadataForUpload['fullPath']\n  };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n  function handler(xhr) {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\nfunction getResumableUploadStatus(service, location, url, blob) {\n  const headers = {\n    'X-Goog-Upload-Command': 'query'\n  };\n  function handler(xhr) {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\nconst RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  function handler(xhr, text) {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An event that is triggered on a task.\r\n * @internal\r\n */\nconst TaskEvent = {\n  /**\r\n   * For this event,\r\n   * <ul>\r\n   *   <li>The `next` function is triggered on progress updates and when the\r\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n   *       argument.</li>\r\n   *   <li>The `error` function is triggered if the upload is canceled or fails\r\n   *       for another reason.</li>\r\n   *   <li>The `complete` function is triggered if the upload completes\r\n   *       successfully.</li>\r\n   * </ul>\r\n   */\n  STATE_CHANGED: 'state_changed'\n};\n// type keys = keyof TaskState\n/**\r\n * Represents the current state of a running upload.\r\n * @internal\r\n */\nconst TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\nfunction taskStateFromInternalTaskState(state) {\n  switch (state) {\n    case \"running\" /* RUNNING */:\n    case \"pausing\" /* PAUSING */:\n    case \"canceling\" /* CANCELING */:\n      return TaskState.RUNNING;\n    case \"paused\" /* PAUSED */:\n      return TaskState.PAUSED;\n    case \"success\" /* SUCCESS */:\n      return TaskState.SUCCESS;\n    case \"canceled\" /* CANCELED */:\n      return TaskState.CANCELED;\n    case \"error\" /* ERROR */:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass Observer {\n  constructor(nextOrObserver, error, complete) {\n    const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver;\n      this.error = error !== null && error !== void 0 ? error : undefined;\n      this.complete = complete !== null && complete !== void 0 ? complete : undefined;\n    } else {\n      const observer = nextOrObserver;\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction async(f) {\n  return function () {\n    for (var _len5 = arguments.length, argsToForward = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      argsToForward[_key5] = arguments[_key5];\n    }\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** An override for the text-based Connection. Used in tests. */\nlet textFactoryOverride = null;\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\nclass XhrConnection {\n  constructor() {\n    this.sent_ = false;\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n  send(url, method, body, headers) {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n  getErrorCode() {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n  getStatus() {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n  getResponse() {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n    return this.xhr_.response;\n  }\n  getErrorText() {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n    return this.xhr_.statusText;\n  }\n  /** Aborts the request. */\n  abort() {\n    this.xhr_.abort();\n  }\n  getResponseHeader(header) {\n    return this.xhr_.getResponseHeader(header);\n  }\n  addUploadProgressListener(listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n  removeUploadProgressListener(listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\nclass XhrTextConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'text';\n  }\n}\nfunction newTextConnection() {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\nclass XhrBytesConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n}\nfunction newBytesConnection() {\n  return new XhrBytesConnection();\n}\nclass XhrBlobConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'blob';\n  }\n}\nfunction newBlobConnection() {\n  return new XhrBlobConnection();\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\nclass UploadTask {\n  /**\r\n   * @param ref - The firebaseStorage.Reference object this task came\r\n   *     from, untyped to avoid cyclic dependencies.\r\n   * @param blob - The blob to upload.\r\n   */\n  constructor(ref, blob) {\n    let metadata = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    /**\r\n     * Number of bytes transferred so far.\r\n     */\n    this._transferred = 0;\n    this._needToFetchStatus = false;\n    this._needToFetchMetadata = false;\n    this._observers = [];\n    this._error = undefined;\n    this._uploadUrl = undefined;\n    this._request = undefined;\n    this._chunkMultiplier = 1;\n    this._resolve = undefined;\n    this._reject = undefined;\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = \"running\" /* RUNNING */;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(\"canceled\" /* CANCELED */)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(\"error\" /* ERROR */);\n      }\n    };\n\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(\"canceled\" /* CANCELED */)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(\"error\" /* ERROR */);\n      }\n    };\n\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n  _makeProgressCallback() {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n  _shouldDoResumable(blob) {\n    return blob.size() > 256 * 1024;\n  }\n  _start() {\n    if (this._state !== \"running\" /* RUNNING */) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n  _resolveToken(callback) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([this._ref.storage._getAuthToken(), this._ref.storage._getAppCheckToken()]).then(_ref => {\n      let [authToken, appCheckToken] = _ref;\n      switch (this._state) {\n        case \"running\" /* RUNNING */:\n          callback(authToken, appCheckToken);\n          break;\n        case \"canceling\" /* CANCELING */:\n          this._transition(\"canceled\" /* CANCELED */);\n          break;\n        case \"pausing\" /* PAUSING */:\n          this._transition(\"paused\" /* PAUSED */);\n          break;\n      }\n    });\n  }\n  // TODO(andysoto): assert false\n  _createResumable() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n      const createRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n      this._request = createRequest;\n      createRequest.getPromise().then(url => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n  _fetchStatus() {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl;\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\n      const statusRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n  _continueUpload() {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(this._transferred, this._blob.size());\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl;\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\n      } catch (e) {\n        this._error = e;\n        this._transition(\"error\" /* ERROR */);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then(newStatus => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(\"success\" /* SUCCESS */);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n  _increaseMultiplier() {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n  _fetchMetadata() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\n      const metadataRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(\"success\" /* SUCCESS */);\n      }, this._metadataErrorHandler);\n    });\n  }\n  _oneShotUpload() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n      const multipartRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(\"success\" /* SUCCESS */);\n      }, this._errorHandler);\n    });\n  }\n  _updateProgress(transferred) {\n    const old = this._transferred;\n    this._transferred = transferred;\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n  _transition(state) {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case \"canceling\" /* CANCELING */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case \"pausing\" /* PAUSING */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case \"running\" /* RUNNING */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === \"paused\" /* PAUSED */;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case \"paused\" /* PAUSED */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case \"canceled\" /* CANCELED */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case \"error\" /* ERROR */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case \"success\" /* SUCCESS */:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n    }\n  }\n  completeTransitions_() {\n    switch (this._state) {\n      case \"pausing\" /* PAUSING */:\n        this._transition(\"paused\" /* PAUSED */);\n        break;\n      case \"canceling\" /* CANCELING */:\n        this._transition(\"canceled\" /* CANCELED */);\n        break;\n      case \"running\" /* RUNNING */:\n        this._start();\n        break;\n    }\n  }\n  /**\r\n   * A snapshot of the current task state.\r\n   */\n  get snapshot() {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata,\n      task: this,\n      ref: this._ref\n    };\n  }\n  /**\r\n   * Adds a callback for an event.\r\n   * @param type - The type of event to listen for.\r\n   * @param nextOrObserver -\r\n   *     The `next` function, which gets called for each item in\r\n   *     the event stream, or an observer object with some or all of these three\r\n   *     properties (`next`, `error`, `complete`).\r\n   * @param error - A function that gets called with a `StorageError`\r\n   *     if the event stream ends due to an error.\r\n   * @param completed - A function that gets called if the\r\n   *     event stream ends normally.\r\n   * @returns\r\n   *     If only the event argument is passed, returns a function you can use to\r\n   *     add callbacks (see the examples above). If more than just the event\r\n   *     argument is passed, returns a function you can call to unregister the\r\n   *     callbacks.\r\n   */\n  on(type, nextOrObserver, error, completed) {\n    const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n  /**\r\n   * This object behaves like a Promise, and resolves with its snapshot data\r\n   * when the upload completes.\r\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n   * @param onRejected - The rejection callback.\r\n   */\n  then(onFulfilled, onRejected) {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then(onFulfilled, onRejected);\n  }\n  /**\r\n   * Equivalent to calling `then(null, onRejected)`.\r\n   */\n  catch(onRejected) {\n    return this.then(null, onRejected);\n  }\n  /**\r\n   * Adds the given observer.\r\n   */\n  _addObserver(observer) {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n  /**\r\n   * Removes the given observer.\r\n   */\n  _removeObserver(observer) {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n  _notifyObservers() {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n  _finishPromise() {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          async(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject;\n          async(toCall.bind(null, this._error))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n  _notifyObserver(observer) {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          async(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          async(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n    }\n  }\n  /**\r\n   * Resumes a paused task. Has no effect on a currently running or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n  resume() {\n    const valid = this._state === \"paused\" /* PAUSED */ || this._state === \"pausing\" /* PAUSING */;\n    if (valid) {\n      this._transition(\"running\" /* RUNNING */);\n    }\n\n    return valid;\n  }\n  /**\r\n   * Pauses a currently running task. Has no effect on a paused or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n  pause() {\n    const valid = this._state === \"running\" /* RUNNING */;\n    if (valid) {\n      this._transition(\"pausing\" /* PAUSING */);\n    }\n\n    return valid;\n  }\n  /**\r\n   * Cancels a currently running or paused task. Has no effect on a complete or\r\n   * failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n  cancel() {\n    const valid = this._state === \"running\" /* RUNNING */ || this._state === \"pausing\" /* PAUSING */;\n    if (valid) {\n      this._transition(\"canceling\" /* CANCELING */);\n    }\n\n    return valid;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\nclass Reference {\n  constructor(_service, location) {\n    this._service = _service;\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n  /**\r\n   * Returns the URL for the bucket and path this object references,\r\n   *     in the form gs://<bucket>/<object-path>\r\n   * @override\r\n   */\n  toString() {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n  _newRef(service, location) {\n    return new Reference(service, location);\n  }\n  /**\r\n   * A reference to the root of this object's bucket.\r\n   */\n  get root() {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n  /**\r\n   * The name of the bucket containing this reference's object.\r\n   */\n  get bucket() {\n    return this._location.bucket;\n  }\n  /**\r\n   * The full path of this object.\r\n   */\n  get fullPath() {\n    return this._location.path;\n  }\n  /**\r\n   * The short name of this object, which is the last component of the full path.\r\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n   */\n  get name() {\n    return lastComponent(this._location.path);\n  }\n  /**\r\n   * The `StorageService` instance this `StorageReference` is associated with.\r\n   */\n  get storage() {\n    return this._service;\n  }\n  /**\r\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n   * this reference is the root.\r\n   */\n  get parent() {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n  /**\r\n   * Utility function to throw an error in methods that do not accept a root reference.\r\n   */\n  _throwIfRoot(name) {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded bytes.\r\n */\nfunction getBytesInternal(ref, maxDownloadSizeBytes) {\n  ref._throwIfRoot('getBytes');\n  const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n  return ref.storage.makeRequestWithTokens(requestInfo, newBytesConnection).then(bytes => maxDownloadSizeBytes !== undefined ?\n  // GCS may not honor the Range header for small files\n  bytes.slice(0, maxDownloadSizeBytes) : bytes);\n}\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded blob.\r\n */\nfunction getBlobInternal(ref, maxDownloadSizeBytes) {\n  ref._throwIfRoot('getBlob');\n  const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n  return ref.storage.makeRequestWithTokens(requestInfo, newBlobConnection).then(blob => maxDownloadSizeBytes !== undefined ?\n  // GCS may not honor the Range header for small files\n  blob.slice(0, maxDownloadSizeBytes) : blob);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n *\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns A Promise containing an UploadResult\r\n */\nfunction uploadBytes$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then(finalMetadata => {\n    return {\n      metadata: finalMetadata,\n      ref\n    };\n  });\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\nfunction uploadBytesResumable$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - StorageReference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns A Promise containing an UploadResult\r\n */\nfunction uploadString$1(ref, value) {\n  let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : StringFormat.RAW;\n  let metadata = arguments.length > 3 ? arguments[3] : undefined;\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = Object.assign({}, metadata);\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType;\n  }\n  return uploadBytes$1(ref, data.data, metadataClone);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\nfunction listAll$1(ref) {\n  const accumulator = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\nasync function listAllHelper(ref, accumulator, pageToken) {\n  const opt = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list$1(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\nfunction list$1(ref, options) {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber('options.maxResults', /* minValue= */1, /* maxValue= */1000, options.maxResults);\n    }\n  }\n  const op = options || {};\n  const requestInfo = list$2(ref.storage, ref._location, /*delimiter= */'/', op.pageToken, op.maxResults);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\nfunction getMetadata$1(ref) {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\nfunction updateMetadata$1(ref, metadata) {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\nfunction getDownloadURL$1(ref) {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then(url => {\n    if (url === null) {\n      throw noDownloadURL();\n    }\n    return url;\n  });\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\nfunction deleteObject$1(ref) {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = deleteObject$2(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\nfunction _getChild$1(ref, childPath) {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\nfunction refFromURL(service, url) {\n  return new Reference(service, url);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\nfunction refFromPath(ref, path) {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild$1(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\nfunction ref$1(serviceOrRef, pathOrUrl) {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\nfunction extractBucket(host, config) {\n  const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\nfunction connectStorageEmulator$1(storage, host, port) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const {\n    mockUserToken\n  } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken = typeof mockUserToken === 'string' ? mockUserToken : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n *\r\n * @internal\r\n */\nclass FirebaseStorageImpl {\n  constructor(\n  /**\r\n   * FirebaseApp associated with this StorageService instance.\r\n   */\n  app, _authProvider,\n  /**\r\n   * @internal\r\n   */\n  _appCheckProvider,\n  /**\r\n   * @internal\r\n   */\n  _url, _firebaseVersion) {\n    this.app = app;\n    this._authProvider = _authProvider;\n    this._appCheckProvider = _appCheckProvider;\n    this._url = _url;\n    this._firebaseVersion = _firebaseVersion;\n    this._bucket = null;\n    /**\r\n     * This string can be in the formats:\r\n     * - host\r\n     * - host:port\r\n     */\n    this._host = DEFAULT_HOST;\n    this._protocol = 'https';\n    this._appId = null;\n    this._deleted = false;\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n  /**\r\n   * The host string for this service, in the form of `host` or\r\n   * `host:port`.\r\n   */\n  get host() {\n    return this._host;\n  }\n  set host(host) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n  /**\r\n   * The maximum time to retry uploads in milliseconds.\r\n   */\n  get maxUploadRetryTime() {\n    return this._maxUploadRetryTime;\n  }\n  set maxUploadRetryTime(time) {\n    validateNumber('time', /* minValue=*/0, /* maxValue= */Number.POSITIVE_INFINITY, time);\n    this._maxUploadRetryTime = time;\n  }\n  /**\r\n   * The maximum time to retry operations other than uploads or downloads in\r\n   * milliseconds.\r\n   */\n  get maxOperationRetryTime() {\n    return this._maxOperationRetryTime;\n  }\n  set maxOperationRetryTime(time) {\n    validateNumber('time', /* minValue=*/0, /* maxValue= */Number.POSITIVE_INFINITY, time);\n    this._maxOperationRetryTime = time;\n  }\n  async _getAuthToken() {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n    const auth = this._authProvider.getImmediate({\n      optional: true\n    });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n  async _getAppCheckToken() {\n    const appCheck = this._appCheckProvider.getImmediate({\n      optional: true\n    });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n  /**\r\n   * Stop running requests and prevent more from being created.\r\n   */\n  _delete() {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n  /**\r\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n   * at the given Location.\r\n   */\n  _makeStorageReference(loc) {\n    return new Reference(this, loc);\n  }\n  /**\r\n   * @param requestInfo - HTTP RequestInfo object\r\n   * @param authToken - Firebase auth token\r\n   */\n  _makeRequest(requestInfo, requestFactory, authToken, appCheckToken) {\n    if (!this._deleted) {\n      const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion);\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n  async makeRequestWithTokens(requestInfo, requestFactory) {\n    const [authToken, appCheckToken] = await Promise.all([this._getAuthToken(), this._getAppCheckToken()]);\n    return this._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();\n  }\n}\nconst name = \"@firebase/storage\";\nconst version = \"0.9.4\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Type constant for Firebase Storage.\r\n */\nconst STORAGE_TYPE = 'storage';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise containing the object's bytes\r\n */\nfunction getBytes(ref, maxDownloadSizeBytes) {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref, maxDownloadSizeBytes);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\nfunction uploadBytes(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytes$1(ref, data, metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the string to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\nfunction uploadString(ref, value, format, metadata) {\n  ref = getModularInstance(ref);\n  return uploadString$1(ref, value, format, metadata);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\nfunction uploadBytesResumable(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytesResumable$1(ref, data, metadata);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\nfunction getMetadata(ref) {\n  ref = getModularInstance(ref);\n  return getMetadata$1(ref);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\nfunction updateMetadata(ref, metadata) {\n  ref = getModularInstance(ref);\n  return updateMetadata$1(ref, metadata);\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\nfunction list(ref, options) {\n  ref = getModularInstance(ref);\n  return list$1(ref, options);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\nfunction listAll(ref) {\n  ref = getModularInstance(ref);\n  return listAll$1(ref);\n}\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\nfunction getDownloadURL(ref) {\n  ref = getModularInstance(ref);\n  return getDownloadURL$1(ref);\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\nfunction deleteObject(ref) {\n  ref = getModularInstance(ref);\n  return deleteObject$1(ref);\n}\nfunction ref(serviceOrRef, pathOrUrl) {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return ref$1(serviceOrRef, pathOrUrl);\n}\n/**\r\n * @internal\r\n */\nfunction _getChild(ref, childPath) {\n  return _getChild$1(ref, childPath);\n}\n/**\r\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\r\n * @public\r\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\r\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\r\n * If not passed, uses the app's default Storage Bucket.\r\n * @returns A {@link FirebaseStorage} instance.\r\n */\nfunction getStorage() {\n  let app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  let bucketUrl = arguments.length > 1 ? arguments[1] : undefined;\n  app = getModularInstance(app);\n  const storageProvider = _getProvider(app, STORAGE_TYPE);\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  return storageInstance;\n}\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\r\n * token to use for unit testing Security Rules.\r\n * @public\r\n */\nfunction connectStorageEmulator(storage, host, port) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  connectStorageEmulator$1(storage, host, port, options);\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * This API is not available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise that resolves with a Blob containing the object's bytes\r\n */\nfunction getBlob(ref, maxDownloadSizeBytes) {\n  ref = getModularInstance(ref);\n  return getBlobInternal(ref, maxDownloadSizeBytes);\n}\n/**\r\n * Downloads the data at the object's location. Raises an error event if the\r\n * object is not found.\r\n *\r\n * This API is only available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A stream with the object's data as bytes\r\n */\nfunction getStream(ref, maxDownloadSizeBytes) {\n  throw new Error('getStream() is only supported by NodeJS builds');\n}\n\n/**\r\n * Cloud Storage for Firebase\r\n *\r\n * @packageDocumentation\r\n */\nfunction factory(container, _ref2) {\n  let {\n    instanceIdentifier: url\n  } = _ref2;\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n  return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\n}\nfunction registerStorage() {\n  _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\n  //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n  registerVersion(name, version, '');\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, 'esm2017');\n}\nregisterStorage();\nexport { StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };","map":{"version":3,"mappings":"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","names":["DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","StorageError","FirebaseError","constructor","code","message","prependCode","serverResponse","_baseMessage","Object","setPrototypeOf","prototype","_codeEquals","customData","unknown","objectNotFound","path","quotaExceeded","bucket","unauthenticated","unauthorizedApp","unauthorized","retryLimitExceeded","canceled","invalidUrl","url","invalidDefaultBucket","noDefaultBucket","cannotSliceBlob","serverFileWrongSize","noDownloadURL","invalidArgument","appDeleted","invalidRootOperation","name","invalidFormat","format","internalError","Location","path_","isRoot","length","fullServerUrl","encode","encodeURIComponent","bucketOnlyServerUrl","makeFromBucketSpec","bucketString","host","bucketLocation","makeFromUrl","e","location","bucketDomain","gsModify","loc","charAt","slice","gsPath","gsRegex","RegExp","gsIndices","httpModify","decodeURIComponent","version","firebaseStorageHost","replace","firebaseStoragePath","firebaseStorageRegExp","firebaseStorageIndices","cloudStorageHost","cloudStoragePath","cloudStorageRegExp","cloudStorageIndices","groups","regex","indices","postModify","i","group","captures","exec","bucketValue","pathValue","FailRequest","error","promise_","Promise","reject","getPromise","cancel","_appDelete","start","f","callback","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","apply","callWithDelay","millis","setTimeout","handler","clearGlobalTimeout","clearTimeout","success","call","mustStop","waitMillis","Math","random","stopped","stop","wasTimeout","id","isJustDef","p","isFunction","isNonArrayObject","Array","isArray","isString","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","value","makeUrl","urlPart","protocol","origin","makeQueryString","params","queryPart","key","hasOwnProperty","nextPart","ErrorCode","NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","resolve","resolve_","reject_","start_","doTheRequest","backoffCallback","RequestEndStatus","connection","pendingConnection_","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","send","then","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","status","getStatus","isRetryStatusCode_","wasCanceled","ABORT","successCode","indexOf","backoffDone","requestWentThrough","wasSuccessCode","result","getResponse","err","getErrorText","appDelete_","canceled_","backoffId_","appDelete","abort","isFiveHundredCode","extraRetryCodes","isExtraRetryCode","isRequestSpecificRetryCode","addAuthHeader_","headers","authToken","addVersionHeader_","firebaseVersion","addGmpidHeader_","appId","addAppCheckHeader_","appCheckToken","makeRequest","requestInfo","requestFactory","urlParams","assign","method","body","successCodes","additionalRetryCodes","errorHandler","progressCallback","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","undefined","getBlob","bb","append","sliceBlob","blob","end","webkitSlice","mozSlice","decodeBase64","encoded","atob","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","StringData","data","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","b","c","charCodeAt","push","valid","hi","lo","Uint8Array","percentEncodedBytes_","decoded","hasMinus","hasUnder","invalidChar","hasPlus","hasSlash","bytes","array","DataURLParts","dataURL","matches","match","middle","base64","endsWith","substring","rest","dataUrl","parts","s","longEnough","FbsBlob","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","set","size_","type_","startByte","endByte","realBlob","sliced","buffer","blobby","map","val","uint8Arrays","finalLength","forEach","merged","index","uploadData","jsonObjectOrNull","obj","JSON","parse","parent","lastIndexOf","newPath","child","childPath","canonicalChildPath","split","filter","component","join","lastComponent","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","xformPath","fullPath","getMappings","mappings","mappingsXformPath","_metadata","nameMapping","xformSize","Number","sizeMapping","addRef","service","generateRef","_makeStorageReference","defineProperty","get","fromResource","resource","len","mapping","fromResourceString","resourceString","downloadUrlFromResourceString","tokens","tokensList","urls","token","base","queryString","alt","toResourceString","stringify","PREFIXES_KEY","ITEMS_KEY","fromBackendResponse","listResult","prefixes","items","nextPageToken","pathWithoutTrailingSlash","reference","item","fromResponseString","RequestInfo","handlerCheck","cndn","metadataHandler","xhr","text","listHandler","downloadUrlHandler","_protocol","sharedErrorHandler","newErr","includes","objectErrorHandler","shared","getMetadata","maxOperationRetryTime","list","delimiter","pageToken","maxResults","getBytes","maxDownloadSizeBytes","_","getDownloadUrl","updateMetadata","deleteObject","_xhr","_text","determineContentType_","metadataForUpload_","metadataClone","multipartUpload","genBoundary","str","toString","boundary","metadata_","metadataString","preBlobPart","postBlobPart","maxUploadRetryTime","ResumableUploadStatus","current","finalized","checkResumeHeader_","allowed","getResponseHeader","allowedStatus","createResumableUpload","metadataForUpload","getResumableUploadStatus","sizeString","isNaN","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","status_","bytesLeft","bytesToUpload","min","uploadCommand","uploadStatus","newCurrent","TaskEvent","STATE_CHANGED","TaskState","RUNNING","PAUSED","SUCCESS","CANCELED","ERROR","taskStateFromInternalTaskState","state","Observer","nextOrObserver","complete","asFunctions","next","observer","async","argsToForward","textFactoryOverride","XhrConnection","xhr_","XMLHttpRequest","initXhr","errorCode_","sendPromise_","addEventListener","NETWORK_ERROR","sent_","open","setRequestHeader","response","statusText","header","listener","upload","removeEventListener","XhrTextConnection","responseType","newTextConnection","XhrBytesConnection","newBytesConnection","XhrBlobConnection","newBlobConnection","UploadTask","ref","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","_request","_chunkMultiplier","_needToFetchStatus","completeTransitions_","_error","_transition","_metadataErrorHandler","_promise","_resolve","_reject","_start","_makeProgressCallback","sizeBefore","_transferred","_updateProgress","_uploadUrl","_createResumable","_fetchStatus","_needToFetchMetadata","_fetchMetadata","_continueUpload","_oneShotUpload","_resolveToken","all","storage","_getAuthToken","_getAppCheckToken","_location","createRequest","_makeRequest","statusRequest","uploadRequest","newStatus","_increaseMultiplier","currentSize","metadataRequest","multipartRequest","transferred","old","_notifyObservers","wasPaused","snapshot","externalState","bytesTransferred","totalBytes","task","on","completed","_addObserver","_removeObserver","onFulfilled","onRejected","catch","_observers","_notifyObserver","splice","_finishPromise","observers","triggered","fbsAsync","bind","toCall","resume","pause","Reference","_service","_newRef","root","_throwIfRoot","getBytesInternal","makeRequestWithTokens","getBlobInternal","uploadBytes","finalMetadata","uploadBytesResumable","uploadString","listAll","accumulator","listAllHelper","opt","nextPage","options","op","requestsList","requestsGetMetadata","requestsUpdateMetadata","getDownloadURL","requestsGetDownloadUrl","requestsDeleteObject","_getChild","isUrl","test","refFromURL","refFromPath","FirebaseStorageImpl","_bucket","serviceOrRef","pathOrUrl","extractBucket","config","connectStorageEmulator","port","mockUserToken","_overrideAuthToken","createMockUserToken","app","projectId","_authProvider","_appCheckProvider","_url","_firebaseVersion","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","_host","time","POSITIVE_INFINITY","auth","getImmediate","optional","tokenData","getToken","accessToken","appCheck","_delete","_deleted","request","clear","_appId","add","delete","STORAGE_TYPE","getModularInstance","uploadBytesInternal","uploadStringInternal","uploadBytesResumableInternal","getMetadataInternal","updateMetadataInternal","listInternal","listAllInternal","getDownloadURLInternal","deleteObjectInternal","refInternal","_getChildInternal","getStorage","getApp","bucketUrl","storageProvider","_getProvider","storageInstance","identifier","connectEmulatorInternal","getStream","Error","factory","container","instanceIdentifier","getProvider","authProvider","appCheckProvider","SDK_VERSION","registerStorage","_registerComponent","Component","setMultipleInstances","registerVersion"],"sources":["/Users/pablo/node_modules/@firebase/storage/src/implementation/constants.ts","/Users/pablo/node_modules/@firebase/storage/src/implementation/error.ts","/Users/pablo/node_modules/@firebase/storage/src/implementation/location.ts","/Users/pablo/node_modules/@firebase/storage/src/implementation/failrequest.ts","/Users/pablo/node_modules/@firebase/storage/src/implementation/backoff.ts","/Users/pablo/node_modules/@firebase/storage/src/implementation/type.ts","/Users/pablo/node_modules/@firebase/storage/src/implementation/url.ts","/Users/pablo/node_modules/@firebase/storage/src/implementation/connection.ts","/Users/pablo/node_modules/@firebase/storage/src/implementation/request.ts","/Users/pablo/node_modules/@firebase/storage/src/implementation/fs.ts","/Users/pablo/node_modules/@firebase/storage/src/platform/browser/base64.ts","/Users/pablo/node_modules/@firebase/storage/src/implementation/string.ts","/Users/pablo/node_modules/@firebase/storage/src/implementation/blob.ts","/Users/pablo/node_modules/@firebase/storage/src/implementation/json.ts","/Users/pablo/node_modules/@firebase/storage/src/implementation/path.ts","/Users/pablo/node_modules/@firebase/storage/src/implementation/metadata.ts","/Users/pablo/node_modules/@firebase/storage/src/implementation/list.ts","/Users/pablo/node_modules/@firebase/storage/src/implementation/requestinfo.ts","/Users/pablo/node_modules/@firebase/storage/src/implementation/requests.ts","/Users/pablo/node_modules/@firebase/storage/src/implementation/taskenums.ts","/Users/pablo/node_modules/@firebase/storage/src/implementation/observer.ts","/Users/pablo/node_modules/@firebase/storage/src/implementation/async.ts","/Users/pablo/node_modules/@firebase/storage/src/platform/browser/connection.ts","/Users/pablo/node_modules/@firebase/storage/src/task.ts","/Users/pablo/node_modules/@firebase/storage/src/reference.ts","/Users/pablo/node_modules/@firebase/storage/src/service.ts","/Users/pablo/node_modules/@firebase/storage/src/constants.ts","/Users/pablo/node_modules/@firebase/storage/src/api.ts","/Users/pablo/node_modules/@firebase/storage/src/api.browser.ts","/Users/pablo/node_modules/@firebase/storage/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class StorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unque to StorageError.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   */\n  constructor(code: StorageErrorCode, message: string) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n\n  /**\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `StorageError`s.\n */\nexport const enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  UNAUTHORIZED_APP = 'unauthorized-app',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): StorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): StorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorizedApp(): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED_APP,\n    'This app does not have permission to access Firebase Storage on this project.'\n  );\n}\n\nexport function unauthorized(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): StorageError {\n  return new StorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): StorageError {\n  return new StorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\n/**\n * @internal\n */\nexport function invalidArgument(message: string): StorageError {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): StorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new StorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): StorageError {\n  return new StorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n *\n * @internal\n */\nexport function invalidRootOperation(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(format: string, message: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): StorageError {\n  throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, message);\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): StorageError {\n  throw new StorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string, host: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string, host: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      host === DEFAULT_HOST\n        ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n        : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: StorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * @param f May be invoked\n *     before the function returns.\n * @param callback Get all the arguments passed to the function\n *     passed to f, including the initial boolean.\n */\nexport function start(\n  f: (p1: (success: boolean) => void, canceled: boolean) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let retryTimeoutId: any = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let globalTimeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout(): void {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function handler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    clearGlobalTimeout();\n    if (triggeredCallback) {\n      return;\n    }\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  return typeof Blob !== 'undefined';\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(\n  urlPart: string,\n  host: string,\n  protocol: string\n): string {\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Network headers */\nexport type Headers = Record<string, string>;\n\n/** Response type exposed by the networking APIs. */\nexport type ConnectionType =\n  | string\n  | ArrayBuffer\n  | Blob\n  | NodeJS.ReadableStream;\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n *\n * You can create a new connection by invoking `newTextConnection()`,\n * `newBytesConnection()` or `newStreamConnection()`.\n */\nexport interface Connection<T extends ConnectionType> {\n  /**\n   * Sends a request to the provided URL.\n   *\n   * This method never rejects its promise. In case of encountering an error,\n   * it sets an error code internally which can be accessed by calling\n   * getErrorCode() by callers.\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<void>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponse(): T;\n\n  getErrorText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { id as backoffId, start, stop } from './backoff';\nimport { appDeleted, canceled, retryLimitExceeded, unknown } from './error';\nimport { ErrorHandler, RequestHandler, RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Connection, ErrorCode, Headers, ConnectionType } from './connection';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\n/**\n * Handles network logic for all Storage Requests, including error reporting and\n * retries with backoff.\n *\n * @param I - the type of the backend's network response.\n * @param - O the output type used by the rest of the SDK. The conversion\n * happens in the specified `callback_`.\n */\nclass NetworkRequest<I extends ConnectionType, O> implements Request<O> {\n  private pendingConnection_: Connection<I> | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: O | PromiseLike<O>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private promise_: Promise<O>;\n\n  constructor(\n    private url_: string,\n    private method_: string,\n    private headers_: Headers,\n    private body_: string | Blob | Uint8Array | null,\n    private successCodes_: number[],\n    private additionalRetryCodes_: number[],\n    private callback_: RequestHandler<I, O>,\n    private errorCallback_: ErrorHandler | null,\n    private timeout_: number,\n    private progressCallback_: ((p1: number, p2: number) => void) | null,\n    private connectionFactory_: () => Connection<I>\n  ) {\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: O | PromiseLike<O>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const doTheRequest: (\n      backoffCallback: (success: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ) => void = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n\n      const progressListener: (progressEvent: ProgressEvent) => void =\n        progressEvent => {\n          const loaded = progressEvent.loaded;\n          const total = progressEvent.lengthComputable\n            ? progressEvent.total\n            : -1;\n          if (this.progressCallback_ !== null) {\n            this.progressCallback_(loaded, total);\n          }\n        };\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n\n      // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection\n        .send(this.url_, this.method_, this.body_, this.headers_)\n        .then(() => {\n          if (this.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n          this.pendingConnection_ = null;\n          const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = connection.getStatus();\n          if (!hitServer || this.isRetryStatusCode_(status)) {\n            const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = this.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n    };\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    const backoffDone: (\n      requestWentThrough: boolean,\n      status: RequestEndStatus<I>\n    ) => void = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection as Connection<I>;\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<O> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n\n  private isRetryStatusCode_(status: number): boolean {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [\n      // Request Timeout: web server didn't receive full request in time.\n      408,\n      // Too Many Requests: you're getting rate-limited, basically.\n      429\n    ];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode =\n      this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus<I extends ConnectionType> {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public connection: Connection<I> | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function addAppCheckHeader_(\n  headers: Headers,\n  appCheckToken: string | null\n): void {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nexport function makeRequest<I extends ConnectionType, O>(\n  requestInfo: RequestInfo<I, O>,\n  appId: string | null,\n  authToken: string | null,\n  appCheckToken: string | null,\n  requestFactory: () => Connection<I>,\n  firebaseVersion?: string\n): Request<O> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest<I, O>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    requestFactory\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, StorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  return atob(encoded);\n}\n\nexport function decodeUint8Array(data: Uint8Array): string {\n  return new TextDecoder().decode(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\nimport { decodeBase64 } from '../platform/base64';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = typeof StringFormat[keyof typeof StringFormat];\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n} as const;\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\n/**\n * @internal\n */\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { FirebaseStorageImpl } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: FirebaseStorageImpl): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: FirebaseStorageImpl,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: FirebaseStorageImpl,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string,\n  host: string,\n  protocol: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport { jsonObjectOrNull } from './json';\nimport { ListResult } from '../list';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service._makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as unknown as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Headers, Connection, ConnectionType } from './connection';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\n/**\n * A function that converts a server response to the API type expected by the\n * SDK.\n *\n * @param I - the type of the backend's network response\n * @param O - the output response type used by the rest of the SDK.\n */\nexport type RequestHandler<I extends ConnectionType, O> = (\n  connection: Connection<I>,\n  response: I\n) => O;\n\n/** A function to handle an error. */\nexport type ErrorHandler = (\n  connection: Connection<ConnectionType>,\n  response: StorageError\n) => StorageError;\n\n/**\n * Contains a fully specified request.\n *\n * @param I - the type of the backend's network response.\n * @param O - the output response type used by the rest of the SDK.\n */\nexport class RequestInfo<I extends ConnectionType, O> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n  errorHandler: ErrorHandler | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: RequestHandler<I, O>,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  StorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown,\n  unauthorizedApp\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { Connection, ConnectionType } from './connection';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Throws the UNKNOWN StorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => Metadata {\n  function handler(xhr: Connection<string>, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: FirebaseStorageImpl,\n  bucket: string\n): (p1: Connection<string>, p2: string) => ListResult {\n  function handler(xhr: Connection<string>, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => string | null {\n  function handler(xhr: Connection<string>, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(\n      metadata as Metadata,\n      text,\n      service.host,\n      service._protocol\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      if (\n        // This exact message string is the only consistent part of the\n        // server's error response that identifies it as an App Check error.\n        xhr.getErrorText().includes('Firebase App Check token is invalid')\n      ) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: FirebaseStorageImpl,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<string, ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getBytes<I extends ConnectionType>(\n  service: FirebaseStorageImpl,\n  location: Location,\n  maxDownloadSizeBytes?: number\n): RequestInfo<I, I> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    (_: Connection<I>, data: I) => data,\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n  }\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: FirebaseStorageImpl,\n  location: Location\n): RequestInfo<string, void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: Connection<string>, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(\n  xhr: Connection<string>,\n  allowed?: string[]\n): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: Connection<string>): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: FirebaseStorageImpl,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<string, ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: Connection<string>): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: FirebaseStorageImpl,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<string, ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand =\n    bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(\n    xhr: Connection<string>,\n    text: string\n  ): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport type TaskEvent = string;\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport const TaskEvent = {\n  /**\n   * For this event,\n   * <ul>\n   *   <li>The `next` function is triggered on progress updates and when the\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n   *       argument.</li>\n   *   <li>The `error` function is triggered if the upload is canceled or fails\n   *       for another reason.</li>\n   *   <li>The `complete` function is triggered if the upload completes\n   *       successfully.</li>\n   * </ul>\n   */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport const enum InternalTaskState {\n  RUNNING = 'running',\n  PAUSING = 'pausing',\n  PAUSED = 'paused',\n  SUCCESS = 'success',\n  CANCELING = 'canceling',\n  CANCELED = 'canceled',\n  ERROR = 'error'\n}\n\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport type TaskState = typeof TaskState[keyof typeof TaskState];\n\n// type keys = keyof TaskState\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n} as const;\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFunction } from './type';\nimport { StorageError } from './error';\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `StorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: StorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * An observer identical to the `Observer` defined in packages/util except the\n * error passed into the ErrorFn is specifically a `StorageError`.\n */\nexport interface StorageObserver<T> {\n  /**\n   * Function that is called once for each value in the event stream.\n   */\n  next?: NextFn<T>;\n  /**\n   * A function that is called with a `StorageError`\n   * if the event stream ends due to an error.\n   */\n  error?: ErrorFn;\n  /**\n   * A function that is called if the event stream ends normally.\n   */\n  complete?: CompleteFn;\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error ?? undefined;\n      this.complete = complete ?? undefined;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Connection,\n  ConnectionType,\n  ErrorCode,\n  Headers\n} from '../../implementation/connection';\nimport { internalError } from '../../implementation/error';\n\n/** An override for the text-based Connection. Used in tests. */\nlet textFactoryOverride: (() => Connection<string>) | null = null;\n\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nabstract class XhrConnection<T extends ConnectionType>\n  implements Connection<T>\n{\n  protected xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<void>;\n  protected sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  abstract initXhr(): void;\n\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<void> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  getResponse(): T {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n    return this.xhr_.response;\n  }\n\n  getErrorText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n    return this.xhr_.statusText;\n  }\n\n  /** Aborts the request. */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n\nexport class XhrTextConnection extends XhrConnection<string> {\n  initXhr(): void {\n    this.xhr_.responseType = 'text';\n  }\n}\n\nexport function newTextConnection(): Connection<string> {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\n\nexport class XhrBytesConnection extends XhrConnection<ArrayBuffer> {\n  private data_?: ArrayBuffer;\n\n  initXhr(): void {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n}\n\nexport function newBytesConnection(): Connection<ArrayBuffer> {\n  return new XhrBytesConnection();\n}\n\nexport class XhrBlobConnection extends XhrConnection<Blob> {\n  initXhr(): void {\n    this.xhr_.responseType = 'blob';\n  }\n}\n\nexport function newBlobConnection(): Connection<Blob> {\n  return new XhrBlobConnection();\n}\n\nexport function newStreamConnection(): Connection<NodeJS.ReadableStream> {\n  throw new Error('Streams are only supported on Node');\n}\n\nexport function injectTestConnection(\n  factory: (() => Connection<string>) | null\n): void {\n  textFactoryOverride = factory;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport {\n  canceled,\n  StorageErrorCode,\n  StorageError\n} from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  Observer,\n  Subscribe,\n  Unsubscribe,\n  StorageObserver as StorageObserverInternal,\n  NextFn\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot, StorageObserver } from './public-types';\nimport { async as fbsAsync } from './implementation/async';\nimport { Mappings, getMappings } from './implementation/metadata';\nimport {\n  createResumableUpload,\n  getResumableUploadStatus,\n  RESUMABLE_UPLOAD_CHUNK_SIZE,\n  ResumableUploadStatus,\n  continueResumableUpload,\n  getMetadata,\n  multipartUpload\n} from './implementation/requests';\nimport { Reference } from './reference';\nimport { newTextConnection } from './platform/connection';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * The data to be uploaded.\n   */\n  _blob: FbsBlob;\n  /**\n   * Metadata related to the upload.\n   */\n  _metadata: Metadata | null;\n  private _mappings: Mappings;\n  /**\n   * Number of bytes transferred so far.\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserverInternal<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * Upload state.\n   */\n  _state: InternalTaskState;\n  private _error?: StorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: StorageError) => void;\n  private _metadataErrorHandler: (p1: StorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: StorageError) => void = undefined;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(\n    callback: (authToken: string | null, appCheckToken: string | null) => void\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([\n      this._ref.storage._getAuthToken(),\n      this._ref.storage._getAppCheckToken()\n    ]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken, appCheckToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then((newStatus: ResumableUploadStatus) => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(InternalTaskState.SUCCESS);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  /**\n   * A snapshot of the current task state.\n   */\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata!,\n      task: this,\n      ref: this._ref\n    };\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   * @param nextOrObserver -\n   *     The `next` function, which gets called for each item in\n   *     the event stream, or an observer object with some or all of these three\n   *     properties (`next`, `error`, `complete`).\n   * @param error - A function that gets called with a `StorageError`\n   *     if the event stream ends due to an error.\n   * @param completed - A function that gets called if the\n   *     event stream ends normally.\n   * @returns\n   *     If only the event argument is passed, returns a function you can use to\n   *     add callbacks (see the examples above). If more than just the event\n   *     argument is passed, returns a function you can call to unregister the\n   *     callbacks.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | null\n      | ((snapshot: UploadTaskSnapshot) => unknown),\n    error?: ((a: StorageError) => unknown) | null,\n    completed?: Unsubscribe | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    const observer = new Observer(\n      (nextOrObserver as\n        | StorageObserverInternal<UploadTaskSnapshot>\n        | NextFn<UploadTaskSnapshot>) || undefined,\n      error || undefined,\n      completed || undefined\n    );\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: StorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(onRejected: (p1: StorageError) => T | Promise<T>): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: StorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as StorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { PassThrough, Transform, TransformOptions } from 'stream';\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, lastComponent, parent } from './implementation/path';\nimport {\n  deleteObject as requestsDeleteObject,\n  getBytes,\n  getDownloadUrl as requestsGetDownloadUrl,\n  getMetadata as requestsGetMetadata,\n  list as requestsList,\n  multipartUpload,\n  updateMetadata as requestsUpdateMetadata\n} from './implementation/requests';\nimport { ListOptions, UploadResult } from './public-types';\nimport { dataFromString, StringFormat } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { FirebaseStorageImpl } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport {\n  newBlobConnection,\n  newBytesConnection,\n  newStreamConnection,\n  newTextConnection\n} from './platform/connection';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(\n    private _service: FirebaseStorageImpl,\n    location: string | Location\n  ) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(\n    service: FirebaseStorageImpl,\n    location: Location\n  ): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): FirebaseStorageImpl {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded bytes.\n */\nexport function getBytesInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref._throwIfRoot('getBytes');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBytesConnection)\n    .then(bytes =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (bytes as ArrayBuffer).slice(0, maxDownloadSizeBytes)\n        : (bytes as ArrayBuffer)\n    );\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded blob.\n */\nexport function getBlobInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref._throwIfRoot('getBlob');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBlobConnection)\n    .then(blob =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (blob as Blob).slice(0, maxDownloadSizeBytes)\n        : (blob as Blob)\n    );\n}\n\n/** Stream the bytes at the object's location. */\nexport function getStreamInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  ref._throwIfRoot('getStream');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n\n  /** A transformer that passes through the first n bytes. */\n  const newMaxSizeTransform: (n: number) => TransformOptions = n => {\n    let missingBytes = n;\n    return {\n      transform(chunk, encoding, callback) {\n        // GCS may not honor the Range header for small files\n        if (chunk.length < missingBytes) {\n          this.push(chunk);\n          missingBytes -= chunk.length;\n        } else {\n          this.push(chunk.slice(0, missingBytes));\n          this.emit('end');\n        }\n        callback();\n      }\n    } as TransformOptions;\n  };\n\n  const result =\n    maxDownloadSizeBytes !== undefined\n      ? new Transform(newMaxSizeTransform(maxDownloadSizeBytes))\n      : new PassThrough();\n\n  ref.storage\n    .makeRequestWithTokens(requestInfo, newStreamConnection)\n    .then(stream => (stream as NodeJS.ReadableStream).pipe(result))\n    .catch(e => result.destroy(e));\n  return result;\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(\n    ref.storage,\n    ref._location,\n    getMappings(),\n    new FbsBlob(data, true),\n    metadata\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_HOST,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from './implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { FirebaseStorage } from './public-types';\nimport { createMockUserToken, EmulatorMockTokenOptions } from '@firebase/util';\nimport { Connection, ConnectionType } from './implementation/connection';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: FirebaseStorageImpl, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorageImpl, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: FirebaseStorageImpl | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(\n  host: string,\n  config?: FirebaseOptions\n): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nexport function connectStorageEmulator(\n  storage: FirebaseStorageImpl,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const { mockUserToken } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken =\n      typeof mockUserToken === 'string'\n        ? mockUserToken\n        : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n *\n * @internal\n */\nexport class FirebaseStorageImpl implements FirebaseStorage {\n  _bucket: Location | null = null;\n  /**\n   * This string can be in the formats:\n   * - host\n   * - host:port\n   */\n  private _host: string = DEFAULT_HOST;\n  _protocol: string = 'https';\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n  _overrideAuthToken?: string;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _appCheckProvider: Provider<AppCheckInternalComponentName>,\n    /**\n     * @internal\n     */\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n\n  /**\n   * The host string for this service, in the form of `host` or\n   * `host:port`.\n   */\n  get host(): string {\n    return this._host;\n  }\n\n  set host(host: string) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  async _getAppCheckToken(): Promise<string | null> {\n    const appCheck = this._appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>,\n    authToken: string | null,\n    appCheckToken: string | null\n  ): Request<O> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        appCheckToken,\n        requestFactory,\n        this._firebaseVersion\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  async makeRequestWithTokens<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>\n  ): Promise<O> {\n    const [authToken, appCheckToken] = await Promise.all([\n      this._getAuthToken(),\n      this._getAppCheckToken()\n    ]);\n\n    return this._makeRequest(\n      requestInfo,\n      requestFactory,\n      authToken,\n      appCheckToken\n    ).getPromise();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Storage.\n */\nexport const STORAGE_TYPE = 'storage';\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\n\nimport {\n  ref as refInternal,\n  FirebaseStorageImpl,\n  connectStorageEmulator as connectEmulatorInternal\n} from './service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  FirebaseStorage,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from './metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal,\n  getBytesInternal\n} from './reference';\nimport { STORAGE_TYPE } from './constants';\nimport { EmulatorMockTokenOptions, getModularInstance } from '@firebase/util';\nimport { StringFormat } from './implementation/string';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from './implementation/location';\nexport { UploadTask as _UploadTask } from './task';\nexport type { Reference as _Reference } from './reference';\nexport type { FirebaseStorageImpl as _FirebaseStorageImpl } from './service';\nexport { FbsBlob as _FbsBlob } from './implementation/blob';\nexport { dataFromString as _dataFromString } from './implementation/string';\nexport {\n  invalidRootOperation as _invalidRootOperation,\n  invalidArgument as _invalidArgument\n} from './implementation/error';\nexport {\n  TaskEvent as _TaskEvent,\n  TaskState as _TaskState\n} from './implementation/taskenums';\nexport { StringFormat };\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise containing the object's bytes\n */\nexport function getBytes(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: StringFormat,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a {@link StorageReference} for the given url.\n * @param storage - {@link FirebaseStorage} instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorage, url?: string): StorageReference;\n/**\n * Returns a {@link StorageReference} for the given path in the\n * default bucket.\n * @param storageOrRef - {@link FirebaseStorage} or {@link StorageReference}.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if {@link FirebaseStorage}\n * instance provided) or returns same reference (if {@link StorageReference} provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorage | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: FirebaseStorage | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as FirebaseStorageImpl | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): FirebaseStorage {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage'> = _getProvider(app, STORAGE_TYPE);\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  return storageInstance;\n}\n\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\n * token to use for unit testing Security Rules.\n * @public\n */\nexport function connectStorageEmulator(\n  storage: FirebaseStorage,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  connectEmulatorInternal(storage as FirebaseStorageImpl, host, port, options);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StorageReference } from './public-types';\nimport { Reference, getBlobInternal } from './reference';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * This API is not available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise that resolves with a Blob containing the object's bytes\n */\nexport function getBlob(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref = getModularInstance(ref);\n  return getBlobInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Downloads the data at the object's location. Raises an error event if the\n * object is not found.\n *\n * This API is only available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A stream with the object's data as bytes\n */\nexport function getStream(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  throw new Error('getStream() is only supported by NodeJS builds');\n}\n","/**\n * Cloud Storage for Firebase\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\n\nimport { FirebaseStorageImpl } from '../src/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\nimport { FirebaseStorage } from './public-types';\nimport { STORAGE_TYPE } from './constants';\n\nexport * from './api';\nexport * from './api.browser';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): FirebaseStorage {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n\n  return new FirebaseStorageImpl(\n    app,\n    authProvider,\n    appCheckProvider,\n    url,\n    SDK_VERSION\n  );\n}\n\nfunction registerStorage(): void {\n  _registerComponent(\n    new Component(\n      STORAGE_TYPE,\n      factory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n  registerVersion(name, version, '__RUNTIME_ENV__');\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterStorage();\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}